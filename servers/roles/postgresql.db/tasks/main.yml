- name: APT Install psycopg2
  apt: name=python-psycopg2
  when: ansible_os_family == 'Debian'

- name: YUM Install psycopg2
  yum: name=python-psycopg2
  when: ansible_os_family == 'RedHat'

- name: Create Postgresql backup directory
  file: path={{ postgresql_backup_dir }} owner=postgres group=postgres state=directory

- name: Restart PostgreSQL to get backup settings in effect (Debian)
  service: name=postgresql state=restarted
  when: ansible_os_family == 'Debian'

- name: Restart PostgreSQL to get backup settings in effect (RedHat)
  service: name=postgresql-9.4 state=restarted
  when: ansible_os_family == 'RedHat'

- name: Ensure database is created
  sudo: yes
  sudo_user: postgres
  postgresql_db: name={{dbname}}
                 encoding='UTF-8'

- name: Ensure users have access to database
  sudo: yes
  sudo_user: postgres
  postgresql_user: db={{dbname}} name={{item.dbuser}} password={{item.dbpassword}} priv=ALL
  with_items: "{{ db_accounts }}"

- name: Ensure users do not have unnecessary privileges
  sudo: yes
  sudo_user: postgres
  postgresql_user: name={{item.dbuser}} role_attr_flags=SUPERUSER,NOCREATEDB  # Note: we might want to have NOSUPERUSER
  with_items: "{{ db_accounts }}"

- name: Install script to remove old PostgreSQL backups
  template:
    src: remove_old_backups.sh.j2
    dest: "{{ postgresql_backup_local_dir}}/bin/remove_old_backups.sh"
    owner: postgres
    group: postgres
    mode: 0750

- name: Schedule removing old PostgreSQL backups
  cron:
    name: Remove old PostgreSQL backups
    cron_file: ansible_remove_old_postgresql_backups
    user: postgres
    hour: 0
    minute: 30
    job: "{{ postgresql_backup_local_dir }}/bin/remove_old_backups.sh"
