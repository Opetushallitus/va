import {test as baseTest, expect} from "@playwright/test"
import {KoodienhallintaPage} from "../pages/koodienHallintaPage";

const test = baseTest.extend<{koodienhallintaPage: KoodienhallintaPage}>({
  koodienhallintaPage: async ({page}, use) => {
    const koodienhallintaPage = new KoodienhallintaPage(page)
    await koodienhallintaPage.navigate()
    await use(koodienhallintaPage)
  }
})

test.describe('Koodienhallinta', () => {
  test('deleting code works', async ({page, koodienhallintaPage}) => {
    await koodienhallintaPage.yearInput.fill('2022')
    await koodienhallintaPage.nameInput.fill( 'testName')
    await koodienhallintaPage.codeInput.fill('testCode')
    await koodienhallintaPage.submitButton.click()
    await koodienhallintaPage.codeList.locator('text=testCode')
    page.on('dialog', dialog => dialog.accept('Oletko aivan varma, että haluat poistaa koodin?'))
    await koodienhallintaPage.page.locator('[data-test-id=code-cell-2022-testCode-testName]').locator('[data-test-id=delete-code]').click()
  })

  test('validates year input', async ({koodienhallintaPage}) => {
    await koodienhallintaPage.submitButton.isDisabled()
    await koodienhallintaPage.yearInput.fill('1900')
    await koodienhallintaPage.nameInput.fill( 'testName')
    await koodienhallintaPage.codeInput.fill('testCode')
    await koodienhallintaPage.submitButton.isDisabled()
    await koodienhallintaPage.codeInputFormHasError("Vuosi voi olla minimissään 1970")
    await koodienhallintaPage.submitButton.isDisabled()
    await koodienhallintaPage.yearInput.fill('2200')
    await koodienhallintaPage.codeInputFormHasError("Vuosi voi olla maksimissaan 2100")
    await koodienhallintaPage.submitButton.isDisabled()
    await koodienhallintaPage.yearInput.fill('')
    await koodienhallintaPage.codeInputFormHasError("Vuosi on pakollinen")
    await koodienhallintaPage.yearInput.fill('2022')
    await koodienhallintaPage.submitButton.isEnabled()
    await koodienhallintaPage.noCodeInputFormErrors()
  })
  test('validates code input', async ({koodienhallintaPage}) => {
    await koodienhallintaPage.submitButton.isDisabled()
    await koodienhallintaPage.yearInput.fill('2022')
    await koodienhallintaPage.codeInput.fill('this input is too long')
    await koodienhallintaPage.nameInput.fill( 'testName')
    await koodienhallintaPage.submitButton.isDisabled()
    await koodienhallintaPage.codeInputFormHasError("Koodi voi olla max 13 merkkiä pitkä")
    await koodienhallintaPage.codeInput.fill('')
    await koodienhallintaPage.submitButton.isDisabled()
    await koodienhallintaPage.codeInputFormHasError("Koodi on pakollinen")
    await koodienhallintaPage.codeInput.fill('testCode')
    await koodienhallintaPage.submitButton.isEnabled()
    await koodienhallintaPage.noCodeInputFormErrors()
  })
  test('validates name input', async ({koodienhallintaPage}) => {
    await koodienhallintaPage.submitButton.isDisabled()
    await koodienhallintaPage.yearInput.fill('2022')
    await koodienhallintaPage.nameInput.fill( '')
    await koodienhallintaPage.codeInput.fill('testCode')
    await koodienhallintaPage.submitButton.isDisabled()
    await koodienhallintaPage.codeInputFormHasError("Nimi on pakollinen")
    await koodienhallintaPage.nameInput.fill('testName')
    await koodienhallintaPage.submitButton.isEnabled()
    await koodienhallintaPage.noCodeInputFormErrors()
  })
  test('navigating between tabs clears values in form', async ({koodienhallintaPage}) => {
    await koodienhallintaPage.yearInput.fill('2022')
    await koodienhallintaPage.codeInput.fill('will be')
    await koodienhallintaPage.nameInput.fill( 'cleared')
    await koodienhallintaPage.submitButton.isEnabled()
    await koodienhallintaPage.clickKoodienhallintaTab("project")
    expect(await koodienhallintaPage.yearInput.textContent()).toEqual('')
    expect(await koodienhallintaPage.nameInput.textContent()).toEqual('')
    expect(await koodienhallintaPage.nameInput.textContent()).toEqual('')
    await koodienhallintaPage.submitButton.isDisabled()
  })
})
