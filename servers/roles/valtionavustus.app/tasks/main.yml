- name: Allow port 8081 access in firewall (RedHat)
  lineinfile:
    dest: '{{ iptables_script }}'
    regexp: '^iptables .* --comment "va-hakija webapp traffic from load balancer"$'
    line: 'iptables -I INPUT -m tcp -p tcp -s oph-va-lb-prod01.csc.fi --dport 8081 -j ACCEPT -m comment --comment "va-hakija webapp traffic from load balancer"'
    state: present
  notify: Reload iptables
  when: ansible_os_family == 'RedHat'
  tags:
    - firewall

- name: Allow port 6071 access in firewall (RedHat)
  lineinfile:
    dest: '{{ iptables_script }}'
    regexp: '^iptables .* --comment "va-virkailija webapp traffic from load balancer"$'
    line: 'iptables -I INPUT -m tcp -p tcp -s oph-va-lb-prod01.csc.fi --dport 6071 -j ACCEPT -m comment --comment "va-virkailija webapp traffic from load balancer"'
    state: present
  notify: Reload iptables
  when: ansible_os_family == 'RedHat'
  tags:
    - firewall

- name: Create www group
  group: name=www state=present

- name: Create www user
  user: name=www comment="WWW user" group=www

- name: Create www-data group
  group: name=www-data state=present

- name: Create va-deploy user
  user: name=va-deploy comment="User for application deploys" group=www-data

- name: Create application dir
  file: path={{ data_dir }}/www owner=www group=www-data state=directory mode=0775

- name: Create config dir
  file: path={{ data_dir }}/www/config owner=www group=www state=directory mode=0700

- name: Check if app secrets file is available
  local_action: stat path="{{ app_secrets_vault_file }}"
  become: no
  register: app_secrets_vault_file_info
  tags:
    - app_secrets

- name: Fail if no app secrets file is found
  fail:
    msg: "not found: {{ app_secrets_vault_file }}"
  when: app_secrets_vault_file_info.stat.isreg is not defined or app_secrets_vault_file_info.stat.isreg == False
  tags:
    - app_secrets

- name: Decrypt app secrets file into memory
  local_action: shell ansible-vault view "{{ app_secrets_vault_file }}"
  become: no
  register: app_secrets_contents
  changed_when: False
  check_mode: no
  tags:
    - app_secrets

- name: Copy app secrets to the server
  copy:
    content: "{{ app_secrets_contents.stdout }}"
    dest: "{{ data_dir }}/www/config/secret-{{ app_profile }}.edn"
    owner: www
    group: www
    mode: 0600
  notify:
    - Restart va-hakija
    - Restart va-virkailija
  tags:
    - app_secrets

- name: Copy log4j.properties for apps to the server
  template:
    src: "log4j.properties.j2"
    dest: "{{ data_dir }}/www/config/{{ item }}-log4j.properties"
    owner: www
    group: www
    mode: 0600
  with_items:
    - va-hakija
    - va-virkailija
  notify:
    - Restart va-hakija
    - Restart va-virkailija

- name: Create ~www/.ssh directory
  file:
    path: "~www/.ssh"
    state: directory
    owner: www
    group: www
    mode: 0700

- name: Copy .ssh/known_hosts for www user
  template:
    src: "ssh_known_hosts.j2"
    dest: "~www/.ssh/known_hosts"
    owner: www
    group: www
    mode: 0600

- name: Create dumps dir
  file: path={{ data_dir }}/www/dumps owner=www group=www-data state=directory mode=0775

- name: Create logs dir
  file: path={{ logs_dir }}/valtionavustus owner=www group=www state=directory

- name: Add supervisor conf to start and stop the applications
  template: src=supervisord.conf.j2 dest=/etc/supervisord.conf owner=root group=www-data mode=0640
  notify:
    - Restart supervisord
    - Restart va-hakija
    - Restart va-virkailija

- name: Create dir for supervisor lock file
  file: path=/var/run/supervisor owner=www group=www-data state=directory mode=0770

- name: Add supervisor daemon service
  template: src=supervisord.service.j2 dest=/etc/systemd/system/supervisord.service owner=root group=root mode=0644
  notify: Restart supervisord

- name: Add script to run arbitrary SQL file to our db
  template: src=run_sql.bash.j2 dest=/usr/local/bin/run_sql.bash owner=postgres group=postgres mode=0700

- name: Allow va-deploy to run SQL scripts
  lineinfile: 'dest=/etc/sudoers line="va-deploy ALL=(postgres) NOPASSWD: /usr/local/bin/run_sql.bash" validate="visudo -cf %s"'

- name: Add script to dump database contents
  template: src=dump_database_to_sql.bash.j2 dest=/usr/local/bin/dump_database_to_sql.bash owner=postgres group=postgres mode=0700
  tags: backup

- name: Copy Lampi DB dump upload script
  template:
    src: "upload_database_to_lampi.sh.j2"
    dest: /usr/local/bin/upload_database_to_lampi.sh
    owner: root
    group: root
    mode: 0755
  tags: datalake

- name: Schedule Lampi DB upload
  cron:
    name: Upload DB dumps to Lampi datalake
    cron_file: ansible_upload_db_dumps_to_lampi_datalake
    user: root
    hour: 0
    minute: 30
    job: /usr/local/bin/upload_database_to_lampi.sh
  tags: datalake

- name: Add AWS credentials for Lampi DB upload
  blockinfile:
    dest: /root/.aws/credentials
    block: |
      [oph-datalake-source]
      aws_access_key_id={{ aws_datalake_s3_upload_access_key }}
      aws_secret_access_key={{ aws_datalake_s3_upload_secret_access_key }}

      [oph-datalake]
      role_arn = arn:aws:iam::{{ aws_datalake_account_idÂ }}:role/Data-dump-uploader-valtionavustukset
      external_id = {{ aws_datalake_external_id }}
      source_profile = oph-datalake-source
    owner: root
    group: root
    mode: 0600
    create: yes
    state: present
  tags: datalake
