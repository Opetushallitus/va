#!/bin/bash
set -euo pipefail

echo "Cleaning workspace"
./lein clean

echo "Building uber jar"
time ./lein uberjar
echo "Target contents after uberjar:"
ls -alFtr target

echo "Starting Postgresql in Docker"
host_postgres_port=5432
container_postgres_port=5432

echo "Starting Postgresql in Docker"
time /usr/bin/docker pull sameersbn/postgresql:9.4
time /usr/bin/docker run --name postgresql -d -p $host_postgres_port:$container_postgres_port -e 'DB_USER=va' -e 'DB_PASS=va' -e 'DB_NAME="va-dev"' sameersbn/postgresql:9.4
echo 'echo "alter schema public owner to va;" | sudo -u postgres psql -d va-dev -f -' | docker exec -i postgresql /bin/bash -c 'cat > /tmp/give_public_schema_to_va.bash'
echo "Waiting for Postgresql to be listening to its port..."
attempt=0
max_attempts=60
interval_seconds=0.5
until (nc -z `docker inspect --format='{% raw %}{{.NetworkSettings.IPAddress}}{% endraw %}' postgresql` $container_postgres_port ) || [[ $attempt -ge $max_attempts ]] ; do
  echo "  Waiting for Postgresql to be available in the container , attempt $attempt/$max_attempts ..."
  sleep $interval_seconds
  attempt=$(( $attempt + 1 ))
done
if [ $attempt -eq $max_attempts ]; then
  echo "Could not find running Postgresql in $max_attempts attempts with $interval_seconds second intervals, failing."
  /usr/bin/docker stop postgresql
  /usr/bin/docker rm postgresql
  exit 2
fi

echo "Running tests"
time ./lein spec -f junit || true
/usr/bin/docker stop postgresql
/usr/bin/docker rm postgresql
echo "Target contents after running specs:"
ls -alFtr target

echo "Transfering to test server {{ test_machine_name }}"
SSH_KEY=~/.ssh/id_deploy
SSH_USER=va-deploy
SSH="ssh -i $SSH_KEY va-deploy@{{ test_machine_name }}"
BASE_DIR=/var/www
CURRENT_DIR=${BASE_DIR}/current
TARGET_DIR=${BASE_DIR}/va-`date +'%Y%m%d%H%M%S'`
TARGET_JAR_PATH=${TARGET_DIR}/va.jar
echo "...copying artifcats to {{ test_machine_name }}:${TARGET_DIR} ..."
$SSH "mkdir -p ${TARGET_DIR}"
scp -p -i ${SSH_KEY} target/uberjar/oph-valtionavustus-*-standalone.jar ${SSH_USER}@"{{ test_machine_name }}":${TARGET_JAR_PATH}
scp -pr -i ${SSH_KEY} config resources ${SSH_USER}@"{{ test_machine_name }}":${TARGET_DIR}
$SSH ln -sfT ${TARGET_DIR} ${CURRENT_DIR}
echo "Stopping application..."
$SSH "sudo /usr/local/bin/stop_app.bash"
echo "...dropping db.."
$SSH "sudo -u postgres /usr/local/bin/run_sql.bash ${CURRENT_DIR}/resources/sql/drop_public_schema.sql"
APP_COMMAND="sudo /usr/local/bin/run_app.bash ${CURRENT_DIR}/va.jar ${CURRENT_DIR}/config/test.edn"
echo "...starting application with command \"${APP_COMMAND}\" ..."
$SSH "${APP_COMMAND}"
HEALTH_CHECK_COMMAND="/usr/local/bin/health_check.bash"
echo "...checking that it really comes up, with $HEALTH_CHECK_COMMAND ..."
$HEALTH_CHECK_COMMAND
echo "...start done!"

echo "Target contents in the end of $0 :"
ls -alFtr target