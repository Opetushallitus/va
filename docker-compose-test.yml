version: '3.3'

services:
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.playwright-test-runner
    container_name: va-playwright-tests
    depends_on:
      virkailija:
        condition: service_healthy
    volumes:
      - ./playwright-results:/playwright-results
    environment:
      HEADLESS: 'true'
      VIRKAILIJA_HOSTNAME: va-virkailija
      HAKIJA_HOSTNAME: va-hakija
      PLAYWRIGHT_WORKERS: 5
      PLAYWRIGHT_RETRIES: 1
      TZ: 'Europe/Helsinki'
    command: /run_playwright_tests_in_container.sh
    logging:
      options:
        mode: 'non-blocking'

  virkailija:
    build:
      context: .
      dockerfile: ./Dockerfile.virkailija
    container_name: va-virkailija
    hostname: va-virkailija
    environment:
      JAVA_TOOL_OPTIONS: '-Duser.timezone="Europe/Helsinki"'
    volumes:
      - /dev/urandom:/dev/random
    ports:
      - '8081:8081'
    depends_on:
      hakija:
        condition: service_healthy
      fakesmtp:
        condition: service_started
      maksatuspalvelu:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:8081/api/healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      options:
        mode: 'non-blocking'

  hakija:
    build:
      context: .
      dockerfile: ./Dockerfile.hakija
    container_name: va-hakija
    hostname: va-hakija
    environment:
      JAVA_TOOL_OPTIONS: '-Duser.timezone="Europe/Helsinki"'
    volumes:
      - /dev/urandom:/dev/random
    ports:
      - '8080:8080'
    depends_on:
      db:
        condition: service_healthy
      fakesmtp:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:8080/api/healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      options:
        mode: 'non-blocking'

  db:
    image: postgres:12.2
    volumes:
      - ./scripts/postgres-docker/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    container_name: va-postgres
    hostname: va-postgres
    ports:
      - '42042:5432'
    command: ["postgres", "-c", "log_statement=all"]
    environment:
      POSTGRES_USER: 'va'
      POSTGRES_PASSWORD: 'va'
      PGDATA: '/tmp/'
      TZ: "Europe/Helsinki"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      options:
        mode: 'non-blocking'

  db_restore-backup:
    extends: db
    volumes:
      - ./init-db-restore.sql:/docker-entrypoint-initdb.d/init.sql
      - va-postgres-pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: 'va'
      POSTGRES_PASSWORD: 'va'

  fakesmtp:
    build:
      context: .
      dockerfile: ./Dockerfile.rcs-fakesmtp
    container_name: rcs-fakesmtp
    hostname: fakesmtp
    volumes:
      - ./fakesmtp/mail:/var/mail
    ports:
      - '42069:25'
    logging:
      options:
        mode: 'non-blocking'

  maksatuspalvelu:
    image: atmoz/sftp
    hostname: maksatuspalvelu
    volumes:
      - ./maksatuspalvelu/initialize-maksatuspalvelu.sh:/etc/sftp.d/initialize-maksatuspalvelu.sh
      - ./maksatuspalvelu/identity/ssh_host_ed25519_key:/etc/ssh/ssh_host_ed25519_key
      - ./maksatuspalvelu/identity/ssh_host_rsa_key:/etc/ssh/ssh_host_rsa_key
    ports:
      - '42022:22'
    command: demo:pass:1001:100
    logging:
      options:
        mode: 'non-blocking'

volumes:
  va-postgres-pgdata:
