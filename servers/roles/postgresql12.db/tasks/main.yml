- name: Install PostgreSQL 12 server
  yum:
    name: postgresql12-server
    state: present

- name: Install PostgreSQL 12 client
  yum:
    name: postgresql12
    state: present

- name: Initialize DB directory
  shell: /usr/pgsql-12/bin/postgresql-12-setup initdb
  args:
    creates: /var/lib/pgsql/12/data

- name: PostgreSQL 12 server config file
  template:
    src: postgresql.conf.j2
    dest: /var/lib/pgsql/12/data/postgresql.conf
    owner: postgres
    group: postgres
    mode: 0600
  notify:
    - Reload PostgreSQL 12

- name: PostgreSQL 12 pg_hba.conf
  template:
    src: pg_hba.conf.j2
    dest: /var/lib/pgsql/12/data/pg_hba.conf
    owner: postgres
    group: postgres
    mode: 0600
  notify:
    - Reload PostgreSQL 12

- name: Create backup directories
  file: owner=postgres group=postgres mode=0750 state=directory path={{ item }}
  with_items:
    - "{{ postgresql_12_backup_local_dir }}"
    - "{{ postgresql_12_backup_local_dir }}/bin"
    - "{{ postgresql_12_backup_active_dir }}"
    - "{{ postgresql_12_custom_conf_dir }}"

- name: PostgreSQL 12 server custom configs
  template:
    src: va.conf.j2
    dest: "{{ postgresql_12_custom_conf_dir }}/va.conf"
    owner: postgres
    group: postgres
    mode: 0600
  notify:
    - Reload PostgreSQL 12

- name: Create Postgresql backup directory
  file: path={{ postgresql_12_backup_dir }} owner=postgres group=postgres state=directory

- name: Install backup scripts
  template: src={{ item }}.j2 dest={{ postgresql_12_backup_local_dir }}/bin/{{ item }} owner=postgres group=postgres mode=0750
  with_items:
    - backup_working_wal.sh
    - archive_wal.sh
    - scheduled_backup.sh

- name: Start PostgreSQL 12
  service:
    name: postgresql-12
    state: started
    enabled: true

- name: Stop PostgreSQL 9.4
  service:
    name: postgresql-9.4
    state: stopped
    enabled: no

## Below is copy-paste from PG 9.6 configurations, only the port has changed

- name: Ensure database is created
  become: yes
  become_user: postgres
  postgresql_db:
    name: "{{dbname}}"
    encoding: 'UTF-8'
    port: "{{ pg_12_port }}"
  when: not ansible_check_mode

- name: Ensure users have access to database
  become: yes
  become_user: postgres
  postgresql_user:
    db: "{{dbname}}"
    name: "{{item.dbuser}}"
    password: "{{item.dbpassword}}"
    priv: "ALL"
    port: "{{ pg_12_port }}"
  with_items: "{{ db_accounts }}"
  when: not ansible_check_mode

- name: Ensure users do not have unnecessary privileges
  become: yes
  become_user: postgres
  postgresql_user:
    name: "{{item.dbuser}}"
    role_attr_flags: "SUPERUSER,NOCREATEDB"  # Note: we might want to have NOSUPERUSER
    port: "{{ pg_12_port }}"
  with_items: "{{ db_accounts }}"
  when: not ansible_check_mode

- name: Install script to remove old PostgreSQL backups
  template:
    src: remove_old_backups.sh.j2
    dest: "{{ postgresql_12_backup_local_dir}}/bin/remove_old_backups.sh"
    owner: postgres
    group: postgres
    mode: 0750
  tags: backups

- name: Schedule removing old PostgreSQL backups
  cron:
    name: Remove old PostgreSQL backups
    cron_file: ansible_remove_old_postgresql_backups
    user: postgres
    hour: 0
    minute: 30
    job: "{{ postgresql_12_backup_local_dir }}/bin/remove_old_backups.sh"
  tags: backups

- stat: path="/var/lib/pgsql/12/data/postgresql.orig"
  register: postgresqlorig

- name: Fix file permissions for backups
  file: path="/var/lib/pgsql/12/data/postgresql.orig" owner="postgres" group="postgres"
  when: postgresqlorig.stat is defined and postgresqlorig.stat.exists

- name: Install posgres extensions
  yum:
    name: postgresql12-contrib
    state: present

- name: Schedule backups
  cron: name="PostgreSQL Backup" cron_file=ansible_postgresql_backup user=postgres hour={{ postgresql_backup_hour | default(1) }} minute={{ postgresql_backup_minute | default(0) }} day={{ postgresql_backup_day | default(omit) }} month={{ postgresql_backup_month | default(omit) }} weekday={{ postgresql_backup_weekday | default(omit) }} job="{{ postgresql_12_backup_local_dir }}/bin/scheduled_backup.sh{{ ' && ' ~ postgresql_backup_post_command if postgresql_backup_post_command is defined else '' }}"

- name: Schedule PostgreSQL working WAL backup
  cron: name="PostgreSQL WAL Backup" cron_file=ansible_postgresql_walbackup user=postgres job={{ postgresql_12_backup_local_dir }}/bin/backup_working_wal.sh
