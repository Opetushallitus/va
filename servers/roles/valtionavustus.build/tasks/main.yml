- name: Install Docker apt repo key (Debian)
  apt_key: keyserver=pgp.mit.edu id=36A1D7869245C8950F966E92D8576A8BA88D21E9
  when: ansible_os_family == 'Debian'

- name: Add Docker apt repository (Debian)
  apt_repository: repo='deb https://get.docker.com/ubuntu docker main' state=present
  when: ansible_os_family == 'Debian'

- name: Install Docker (Debian)
  apt: state=installed pkg=lxc-docker force=yes
  when: ansible_os_family == 'Debian'

- name: Install Docker (RedHat)
  yum: state=installed pkg=lxc-docker
  when: ansible_os_family == 'RedHat'

- name: Install docker-compose (RedHat)
  yum: state=installed pkg=docker-compose
  when: ansible_os_family == 'RedHat'

- name: Allow Docker to create iptables rules dynamically
  lineinfile:
    dest: /etc/sysconfig/docker
    regexp: '^OPTIONS='
    line: "OPTIONS='--selinux-enabled -g /data/jenkins/docker --iptables=true'"

- name: Create docker group
  group: name=docker state=present

- name: Add "{{ jenkins_user }}" user to docker group
  user: name="{{ jenkins_user }}" groups=docker

- name: Ensure that docker daemon is started
  service: name=docker state=started enabled=yes

- name: Add directory for database db dumps storage
  file: path={{ database_dumps_dir }} owner={{ jenkins_user }} state=directory mode=0700

- name: Install g++ for jest (Debian)
  apt: state=installed pkg=g++
  when: ansible_os_family == 'Debian'

- name: Install g++ for jest (RedHat)
  yum:  state=installed pkg=gcc-c++
  when: ansible_os_family == 'RedHat'

- name: Add gitconfig
  copy:
    dest: /home/jenkins/.gitconfig
    content: "{{ lookup('file', 'gitconfig') }}"

- name: Install chromium so that we get the libs needed by puppeteer
  yum: state=installed pkg=chromium

- name: Add horttiksen upload script 
  blockinfile:
    dest: /home/jenkins/horttiksen-upload-skripti.sh
    block: |
      #!/usr/bin/env bash
      set -o errexit -o nounset -o pipefail

      function aws {
        docker run \
          --env AWS_PROFILE --env AWS_REGION --env AWS_DEFAULT_REGION \
          --env AWS_CONTAINER_CREDENTIALS_RELATIVE_URI \
          --volume ${HOME}/.aws:/root/.aws \
          --volume "$( pwd ):/aws" \
          --rm -i amazon/aws-cli:2.0.6 "$@"
      }
      
      function main {
        curl -X GET http://oph-va-ci-test01.csc.fi:8000/api/json?pretty=true > buildstatus.json

        AWS_PROFILE=rcs-helsinki aws s3 cp /aws/buildstatus.json s3://buildstatus/buildstatus/valtionavustus/buildstatus.json
      }

      main "$@"
    owner: jenkins
    group: jenkins
    mode: 0700
    create: yes
    state: present
  tags: buildstatus

- name: Add AWS credentials for rcs-helsinki buildstatus upload
  blockinfile:
    dest: /home/jenkins/.aws/credentials
    block: |
      [rcs-helsinki-source]
      aws_access_key_id={{ aws_rcs_s3_upload_access_key }}
      aws_secret_access_key={{ aws_rcs_s3_upload_secret_access_key }}
      [rcs-helsinki]
      role_arn = arn:aws:iam::{{ aws_rcs_account_id }}:role/BuildStatusUploaderValtionavustus
      source_profile = rcs-helsinki-source
    owner: jenkins
    group: jenkins
    mode: 0600
    create: yes
    state: present
  tags: buildstatus

- name: Relocate leiningen local repository unto bigger disk
  copy:
    content: "{:user {:local-repo \"/data/jenkins/local-repositories/leiningen\"}}\n"
    dest: /home/jenkins/.lein/profiles.clj
    owner: jenkins
    group: jenkins
    mode: 0600

- name: Relocate the npm cache unto bigger disk
  copy:
    content: "cache=/data/jenkins/local-repositories/npm"
    dest: /home/jenkins/.npmrc
    owner: jenkins
    group: jenkins
    mode: 0600
